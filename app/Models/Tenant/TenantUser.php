<?php

namespace App\Models\Tenant;

use Database\Factories\TenantUserFactory;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class TenantUser extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, SoftDeletes;

    protected $table = 'users';

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'department',
        'title',
        'phone',
        'bio',
        'avatar_url',
        'is_active',
        'last_login_at',
        'settings',
        'metadata',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'is_active' => 'boolean',
            'last_login_at' => 'datetime',
            'settings' => 'array',
            'metadata' => 'array',
        ];
    }

    /**
     * Create a new factory instance for the model.
     */
    protected static function newFactory(): TenantUserFactory
    {
        return TenantUserFactory::new();
    }

    /**
     * Get the activities for the tenant user.
     */
    public function activities(): HasMany
    {
        return $this->hasMany(TenantUserActivity::class, 'user_id');
    }

    /**
     * Get the meetings created by this user.
     */
    public function meetings(): HasMany
    {
        // This will be implemented when meeting models are created
        return $this->hasMany(\App\Models\Tenant\Meeting::class, 'created_by');
    }

    /**
     * Get the reports generated by this user.
     */
    public function reports(): HasMany
    {
        // This will be implemented when report models are created
        return $this->hasMany(\App\Models\Tenant\Report::class, 'created_by');
    }

    /**
     * Scope a query to only include active users.
     */
    public function scopeActive(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }

    /**
     * Scope a query to filter by role.
     */
    public function scopeByRole(Builder $query, string $role): Builder
    {
        return $query->where('role', $role);
    }

    /**
     * Scope a query to only include non-deleted users.
     */
    public function scopeNotDeleted(Builder $query): Builder
    {
        return $query->whereNull('deleted_at');
    }

    /**
     * Check if the user is the tenant owner.
     */
    public function isOwner(): bool
    {
        return $this->role === 'owner';
    }

    /**
     * Check if the user is an admin (owner or admin).
     */
    public function isAdmin(): bool
    {
        return in_array($this->role, ['owner', 'admin']);
    }

    /**
     * Check if the user is a manager or higher.
     */
    public function isManager(): bool
    {
        return in_array($this->role, ['owner', 'admin', 'manager']);
    }

    /**
     * Check if the user can manage other users.
     */
    public function canManageUsers(): bool
    {
        return $this->isAdmin();
    }

    /**
     * Check if the user can manage a specific user.
     */
    public function canManageUser(TenantUser $user): bool
    {
        if (! $this->canManageUsers()) {
            return false;
        }

        // Owners can manage everyone except other owners
        if ($this->isOwner()) {
            return ! $user->isOwner() || $this->id === $user->id;
        }

        // Admins can manage members and managers, but not owners or other admins
        return in_array($user->role, ['member', 'manager']);
    }

    /**
     * Log an activity for the tenant user.
     */
    public function logActivity(string $action, $model = null, array $metadata = [], ?string $description = null): void
    {
        $this->activities()->create([
            'action' => $action,
            'description' => $description,
            'model_type' => $model ? get_class($model) : null,
            'model_id' => $model?->getKey(),
            'metadata' => $metadata,
            'ip_address' => request()->ip(),
        ]);
    }

    /**
     * Update the last login timestamp.
     */
    public function updateLastLogin(): void
    {
        $this->update([
            'last_login_at' => now(),
        ]);
    }

    /**
     * Get the display name for the role.
     */
    public function getRoleDisplayName(): string
    {
        return match ($this->role) {
            'owner' => 'Owner',
            'admin' => 'Administrator',
            'manager' => 'Manager',
            'member' => 'Member',
            default => 'Unknown'
        };
    }

    /**
     * Get user's initials for avatar fallback.
     */
    public function getInitialsAttribute(): string
    {
        $names = explode(' ', $this->name);
        $initials = '';

        foreach ($names as $name) {
            $initials .= strtoupper(substr($name, 0, 1));
        }

        return substr($initials, 0, 2);
    }

    /**
     * Get the full display name with title.
     */
    public function getFullDisplayNameAttribute(): string
    {
        if ($this->title) {
            return "{$this->name} ({$this->title})";
        }

        return $this->name;
    }

    /**
     * Check if user has been active recently.
     */
    public function hasRecentActivity(int $days = 7): bool
    {
        return $this->last_login_at &&
               $this->last_login_at->isAfter(now()->subDays($days));
    }
}
